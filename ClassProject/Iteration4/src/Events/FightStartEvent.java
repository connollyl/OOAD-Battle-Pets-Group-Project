/**
 * This class is used as a way to tell the AI what is going on
 * at the beginning of a fight.
 * Author: Aidan Gengler
 */
package Events;

import java.util.ArrayList;
import java.util.List;
public class FightStartEvent extends BaseEvent
{
	private static String STRING_DEFAULT = "";
	private static final double DOUBLE_DEFAULT = -1.0;
	private static final int INT_DEFAULT = -1;
    private static final Integer NULL = null;
	private static final List<PlayerEventInfo> DEFAULT_LIST = null;
	private int fightNumber;
	private List<PlayerEventInfo> playerEventInfo;
	
	/**
	 * Constructor for the fight start events.
	 * @param builder
	 */
	public FightStartEvent(FightStartEventBuilder builder)
	{
                
                
		super(EventTypes.FIGHT_START);
		if(builder.fightNumber == NULL )
		{
			this.fightNumber = INT_DEFAULT;
		}
		else
		{
			fightNumber = builder.fightNumber;
		}
		if(builder.playerEventInfo == null)
		{
			playerEventInfo = new ArrayList<PlayerEventInfo>();
		}
		else
		{
			playerEventInfo = builder.playerEventInfo ;
		}
	}
	
	/**
	 * Returns the fight number.
	 * @return
	 */
	public int getFightNumber()
	{
		return fightNumber;
	}
	
	/**
	 * returns the player event info.
	 * @return
	 */
	public PlayerEventInfo getPlayerEventInfo()
	{
		return playerEventInfo.get(fightNumber - 1);
	}
	
	/**
	 * Builder class for the fight start event.
	 * @author genglera
	 */
	public static class FightStartEventBuilder
	{
		private int fightNumber;
		private List<PlayerEventInfo> playerEventInfo;
		
		/**
		 * Useless Constructor for the builder
		 */
		public FightStartEventBuilder()
		{	
			
		}
		
		/**
		 * Obtains and saves the fight number.
		 * @param fNumber
		 * @return
		 */
		public FightStartEventBuilder withFightNumber(int fNumber)
		{
			this.fightNumber = fNumber;
			return this;
		}

		/**
		 * Obtains and saves the list of player events.
		 * @param pEventInfo
		 * @return
		 */
		public FightStartEventBuilder withPlayerEventInfo(List<PlayerEventInfo> pEventInfo)
		{
			this.playerEventInfo = pEventInfo;
			return this;
		}
		
		/**
		 * Builds the Fight event itself
		 * @return
		 */
		public FightStartEvent build() {
			return new FightStartEvent(this);
		}
	}

	/**
	 * Returns a string of all data in the fight start event class.
	 */
	@Override
	public String toString() {
		return "FightStartEventBuilder [fightNumber=" + fightNumber + ", playerEventInfo=" + playerEventInfo + "]";
	}
	
	/**
	 * Autogenerated hashcode for the fight start event class.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + fightNumber;
		result = prime * result + ((playerEventInfo == null) ? 0 : playerEventInfo.hashCode());
		return result;
	}

	/**
	 * Autogenerated equals function for the comparison of two
	 * fight start event objects.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		FightStartEvent other = (FightStartEvent) obj;
		if (fightNumber != other.fightNumber)
			return false;
		if (playerEventInfo == null) {
			if (other.playerEventInfo != null)
				return false;
		} else if (!playerEventInfo.equals(other.playerEventInfo))
			return false;
		return true;
	}
	
	
	
	
	
	
	
	
	
}
