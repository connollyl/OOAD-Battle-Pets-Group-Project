package Events;

import java.util.*;
import Pets.*;

public class PlayerEventInfo {

    private PetTypes petType;
    private PlayerTypes playerType;
    private List petSkills;
    private double startingHp;

    /**
     * Constructor for the player event info builder
     * @param builder
     */
    public PlayerEventInfo(PlayerEventInfoBuilder builder) 
    {
    	this.petType = builder.petType;
    	this.playerType = builder.playerType;
    	this.petSkills = builder.petSkills;
    	this.startingHp = builder.startingHp;
    }

    /**
     * Returns the pet type.
     * @return
     */
    public PetTypes getPetType() 
    {
        return petType;
    }

    /**
     * Returns the player type.
     * @return
     */
    public PlayerTypes getPlayerType() 
    {
        return playerType;
    }

    /**
     * Returns a list of skills.
     * @return
     */
    public List<Skills> getSkillSet() 
    {
        return petSkills;
    }

    /**
     * Returns the starting HP
     * @return
     */
    public double getStartingHp() 
    {
        return startingHp;
    }

    /**
	 * Autogenerated hashcode for the player event info class.
	 */
    @Override
    public int hashCode() 
    {
        int hash = 7;
        hash = 17 * hash + Objects.hashCode(this.petType);
        hash = 17 * hash + Objects.hashCode(this.playerType);
        hash = 17 * hash + Objects.hashCode(this.petSkills);
        hash = 17 * hash + (int) (Double.doubleToLongBits(this.startingHp) ^ (Double.doubleToLongBits(this.startingHp) >>> 32));
        return hash;
    }

    /**
	 * Autogenerated equals function for the comparison of two
	 * player event info objects.
	 */
    @Override
    public boolean equals(Object obj) 
    {
        if (this == obj) 
        {
            return true;
        }
        if (obj == null) 
        {
            return false;
        }
        if (getClass() != obj.getClass()) 
        {
            return false;
        }
        final PlayerEventInfo other = (PlayerEventInfo) obj;
        if (Double.doubleToLongBits(this.startingHp) != Double.doubleToLongBits(other.startingHp)) {
            return false;
        }
        if (this.petType != other.petType) 
        {
            return false;
        }
        if (this.playerType != other.playerType) 
        {
            return false;
        }
        if (!Objects.equals(this.petSkills, other.petSkills)) 
        {
            return false;
        }
        return true;
    }

    /**
     * Builds the player event info objects
     * @author genglera
     */
    public static class PlayerEventInfoBuilder 
    {

        public PetTypes petType;
        public PlayerTypes playerType;
        public List<Skills> petSkills;
        public double startingHp;

        /**
         * Useless constructor
         */
        public PlayerEventInfoBuilder() 
        {

        }

        /**
         * Obtains and saves the pet type.
         * @param petType
         * @return
         */
        public PlayerEventInfoBuilder withPetType(PetTypes petType) 
        {
            this.petType = petType;
            return this;
        }

        /**
         * Obtains and saves the layer type.
         * @param playerType
         * @return
         */
        public PlayerEventInfoBuilder withPlayerType(PlayerTypes playerType) 
        {
            this.playerType = playerType;
            return this;
        }

        /**
         * Obtains and saves the list of skill types.
         * @param skillList
         * @return
         */
        public PlayerEventInfoBuilder withPetSkills(List<Skills> skillList) 
        {
            this.petSkills = skillList;
            return this;
        }

        /**
         * Obtains and saves the starting HP.
         * @param startingHp
         * @return
         */
        public PlayerEventInfoBuilder withStartingHp(double startingHp) 
        {
            this.startingHp = startingHp;
            return this;
        }

        /**
         * Builds the object itself.
         * @return
         */
        public PlayerEventInfo build() 
        {
            return new PlayerEventInfo(this);
        }
    }
}
